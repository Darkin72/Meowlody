# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  database:
    image: mysql:8.0
    container_name: music_database
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: music_db
      MYSQL_USER: user
      MYSQL_PASSWORD: 123456
      MYSQL_ROOT_HOST: "%"
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      retries: 3
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    image: music_backend
    user: root
    container_name: music_backend
    restart: always
    environment:
      DB_HOST: database
      DB_USER: user
      DB_PASSWORD: 123456
      DB_NAME: music_db
      PORT: 7205
    ports:
      - "7205:7205"
    volumes:
      - backend_uploads:/app/uploads
    command:
      ["sh", "-c", "chmod -R 777 /app/uploads && node src/Functions/server.js"]
    depends_on:
      database:
        condition: service_healthy
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    image: music_frontend
    container_name: music_frontend
    restart: always
    ports:
      - "8888:8888"
    depends_on:
      - backend

volumes:
  mysql_data:
  backend_uploads:
# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

